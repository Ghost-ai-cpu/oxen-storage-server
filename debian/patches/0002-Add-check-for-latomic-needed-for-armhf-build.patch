From: Jason Rhinelander <jason@imaginary.ca>
Date: Tue, 29 Sep 2020 13:37:38 -0300
Subject: Add check for -latomic (needed for armhf build)

---
 CMakeLists.txt           |  3 +++
 cmake/check_atomic.cmake | 40 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 43 insertions(+)
 create mode 100644 cmake/check_atomic.cmake

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 652dab9..badc2c9 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -31,6 +31,9 @@ if (sodium_VERSION VERSION_LESS 1.0.17)
 endif()
 include_directories(${sodium_INCLUDE_DIR})
 
+include(cmake/check_atomic.cmake)
+link_libatomic()
+
 loki_add_subdirectory(common)
 loki_add_subdirectory(utils)
 loki_add_subdirectory(crypto)
diff --git a/cmake/check_atomic.cmake b/cmake/check_atomic.cmake
new file mode 100644
index 0000000..b1d8442
--- /dev/null
+++ b/cmake/check_atomic.cmake
@@ -0,0 +1,40 @@
+include(CheckCXXSourceCompiles)
+
+function(check_working_cxx_atomics64 varname)
+  set(OLD_CMAKE_REQUIRED_FLAGS ${CMAKE_REQUIRED_FLAGS})
+  set(CMAKE_REQUIRED_FLAGS "${CMAKE_REQUIRED_FLAGS} -std=c++11")
+  check_cxx_source_compiles("
+#include <atomic>
+#include <cstdint>
+std::atomic<uint64_t> x (0);
+int main() {
+  uint64_t i = x.load(std::memory_order_relaxed);
+  return 0;
+}
+" ${varname})
+  set(CMAKE_REQUIRED_FLAGS ${OLD_CMAKE_REQUIRED_FLAGS})
+endfunction()
+
+function(link_libatomic)
+  check_working_cxx_atomics64(HAVE_CXX_ATOMICS64_WITHOUT_LIB)
+
+  if(HAVE_CXX_ATOMICS64_WITHOUT_LIB)
+    message(STATUS "Have working 64bit atomics")
+    return()
+  endif()
+
+  check_library_exists(atomic __atomic_load_8 "" HAVE_CXX_LIBATOMICS64)
+  if (HAVE_CXX_LIBATOMICS64)
+    message(STATUS "Have 64bit atomics via library")
+    list(APPEND CMAKE_REQUIRED_LIBRARIES "atomic")
+    check_working_cxx_atomics64(HAVE_CXX_ATOMICS64_WITH_LIB)
+    if (HAVE_CXX_ATOMICS64_WITH_LIB)
+      message(STATUS "Can link with libatomic")
+      link_libraries(atomic)
+      return()
+    endif()
+  endif()
+
+  message(FATAL_ERROR "Host compiler must support 64-bit std::atomic!")
+endfunction()
+
